#ifndef _COMMON_H
#define _COMMON_H

#include <stdint.h>

#define MCACHE_LINE 64

#ifndef SAFE_RELEASE
#define SAFE_RELEASE(p) { if(p) { (p)->Release(); (p)=NULL; } }
#define SAFE_DELETE(p)  { if(p) { delete (p);     (p)=NULL; } }
#define SAFE_DELETE_ARRAY(p) { if(p) { delete[] (p);   (p)=NULL; } }
#define SAFE_DESTORY(p)  { if(p) { p->DeleteSelf();     (p)=NULL; } }
#endif

enum eMediaType_t
{
	MEDIATYPE_INVALID = -1,
	MEDIATYPE_VIDEO = 1,
	MEDIATYPE_AUDIO = 0,
	MEDIATYPE_SUBTITLE = 2,
};

enum eVideoCodec_t
{
	VIDEOCODEC_INVALID = -1,
	VIDEOCODEC_YV12 = 0,
	VIDEOCODEC_I420,
	VIDEOCODEC_NV12,
	VIDEOCODEC_YUY2,
	VIDEOCODEC_UYVY,
	VIDEOCODEC_RGB32,
	VIDEOCODEC_RGB24,
	VIDEOCODEC_RGB16,
	VIDEOCODEC_BGR32,
	VIDEOCODEC_BGR24,
	VIDEOCODEC_BGR16,
	VIDEOCODEC_H263,
	VIDEOCODEC_H264,
	VIDEOCODEC_H265,
	VIDEOCODEC_MPEG1,
	VIDEOCODEC_MPEG2,
	VIDEOCODEC_MPEG4,
	VIDEOCODEC_VP6,
	VIDEOCODEC_VP8,
	VIDEOCODEC_FFV1,
	VIDEOCODEC_MJPEG,
	VIDEOCODEC_VC1,
	VIDEOCODEC_NUM,
};

enum eAudioCodec_t
{
	AUDIOCODEC_INVALID = -1,
	AUDIOCODEC_AAC = 0,
	AUDIOCODEC_MP3,
	AUDIOCODEC_WMA1,
	AUDIOCODEC_WMA2,
	AUDIOCODEC_AC3,
	AUDIOCODEC_ILBC,
	AUDIOCODEC_OPUS,
	AUDIOCODEC_PCMA,
	AUDIOCODEC_PCMU,
	AUDIOCODEC_G722,
	AUDIOCODEC_G723,
	AUDIOCODEC_G726_16,
	AUDIOCODEC_G726_24,
	AUDIOCODEC_G726_32,
	AUDIOCODEC_G726_40,
	AUDIOCODEC_G729a,
	AUDIOCODEC_G729,
	AUDIOCODEC_NUM,
};

enum ePixelFormat_t
{
	PIXELFORMAT_INVALID = -1,
	PIXELFORMAT_MONOCHROME = 0,
	PIXELFORMAT_I420,
	PIXELFORMAT_422,
	PIXELFORMAT_444,
	PIXELFORMAT_YV12,
	PIXELFORMAT_NV12,
	PIXELFORMAT_RGB,
	PIXELFORMAT_BGR,

};

enum eSampleFormat_t
{
	SAMPLEFORMAT_INVALID = -1,

	SAMPLEFORMAT_U8  = 0,
	SAMPLEFORMAT_S16,
	SAMPLEFORMAT_S32,
	SAMPLEFORMAT_FLT,
	SAMPLEFORMAT_DBL,

	SAMPLEFORMAT_U8P,
	SAMPLEFORMAT_S16P,
	SAMPLEFORMAT_S32P,
	SAMPLEFORMAT_FLTP,
	SAMPLEFORMAT_DBLP,

	SAMPLEFORMAT_NUM,
};

template<typename _Tp> static inline _Tp* alignPtr(_Tp* ptr, int n = (int)sizeof(_Tp))
{
	return (_Tp*)(((size_t)ptr + n - 1) & -n);
}
static inline size_t alignSize(size_t sz, int n)
{
	return (sz + n - 1) & -n;
}

#endif


